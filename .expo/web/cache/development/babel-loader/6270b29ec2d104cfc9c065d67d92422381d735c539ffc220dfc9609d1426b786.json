{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport { NavigationHelpersContext, NavigationContext, NavigationRouteContext, DrawerActions, useTheme } from '@react-navigation/native';\nimport { GestureHandlerRootView } from \"./GestureHandler\";\nimport SafeAreaProviderCompat from \"./SafeAreaProviderCompat\";\nimport ResourceSavingScene from \"./ResourceSavingScene\";\nimport Header from \"./Header\";\nimport DrawerContent from \"./DrawerContent\";\nimport Drawer from \"./Drawer\";\nimport DrawerOpenContext from \"../utils/DrawerOpenContext\";\nimport DrawerPositionContext from \"../utils/DrawerPositionContext\";\nimport useWindowDimensions from \"../utils/useWindowDimensions\";\nimport getIsDrawerOpenFromState from \"../utils/getIsDrawerOpenFromState\";\nvar getDefaultDrawerWidth = function getDefaultDrawerWidth(_ref) {\n  var height = _ref.height,\n    width = _ref.width;\n  var smallerAxisSize = Math.min(height, width);\n  var isLandscape = width > height;\n  var isTablet = smallerAxisSize >= 600;\n  var appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  var maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\nvar GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\nexport default function DrawerView(_ref2) {\n  var state = _ref2.state,\n    navigation = _ref2.navigation,\n    descriptors = _ref2.descriptors,\n    _ref2$lazy = _ref2.lazy,\n    lazy = _ref2$lazy === void 0 ? true : _ref2$lazy,\n    _ref2$drawerContent = _ref2.drawerContent,\n    drawerContent = _ref2$drawerContent === void 0 ? function (props) {\n      return React.createElement(DrawerContent, props);\n    } : _ref2$drawerContent,\n    _ref2$drawerPosition = _ref2.drawerPosition,\n    drawerPosition = _ref2$drawerPosition === void 0 ? I18nManager.isRTL ? 'right' : 'left' : _ref2$drawerPosition,\n    _ref2$keyboardDismiss = _ref2.keyboardDismissMode,\n    keyboardDismissMode = _ref2$keyboardDismiss === void 0 ? 'on-drag' : _ref2$keyboardDismiss,\n    _ref2$overlayColor = _ref2.overlayColor,\n    overlayColor = _ref2$overlayColor === void 0 ? 'rgba(0, 0, 0, 0.5)' : _ref2$overlayColor,\n    _ref2$drawerType = _ref2.drawerType,\n    drawerType = _ref2$drawerType === void 0 ? 'front' : _ref2$drawerType,\n    _ref2$hideStatusBar = _ref2.hideStatusBar,\n    hideStatusBar = _ref2$hideStatusBar === void 0 ? false : _ref2$hideStatusBar,\n    _ref2$statusBarAnimat = _ref2.statusBarAnimation,\n    statusBarAnimation = _ref2$statusBarAnimat === void 0 ? 'slide' : _ref2$statusBarAnimat,\n    drawerContentOptions = _ref2.drawerContentOptions,\n    drawerStyle = _ref2.drawerStyle,\n    edgeWidth = _ref2.edgeWidth,\n    gestureHandlerProps = _ref2.gestureHandlerProps,\n    minSwipeDistance = _ref2.minSwipeDistance,\n    sceneContainerStyle = _ref2.sceneContainerStyle,\n    _ref2$detachInactiveS = _ref2.detachInactiveScreens,\n    detachInactiveScreens = _ref2$detachInactiveS === void 0 ? true : _ref2$detachInactiveS;\n  var _React$useState = React.useState([state.routes[state.index].key]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    loaded = _React$useState2[0],\n    setLoaded = _React$useState2[1];\n  var dimensions = useWindowDimensions();\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var isDrawerOpen = getIsDrawerOpenFromState(state);\n  var handleDrawerOpen = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  var handleDrawerClose = React.useCallback(function () {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(function () {\n    if (!isDrawerOpen || drawerType === 'permanent') {\n      return;\n    }\n    var handleClose = function handleClose() {\n      if (!navigation.isFocused()) {\n        return false;\n      }\n      handleDrawerClose();\n      return true;\n    };\n    var handleEscape = function handleEscape(e) {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n    var subscription = BackHandler.addEventListener('hardwareBackPress', handleClose);\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', handleEscape);\n    }\n    return function () {\n      subscription.remove();\n      if (Platform.OS === 'web') {\n        var _document2, _document2$body, _document2$body$remov;\n        (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', handleEscape);\n      }\n    };\n  }, [drawerType, handleDrawerClose, isDrawerOpen, navigation]);\n  var focusedRouteKey = state.routes[state.index].key;\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([].concat(_toConsumableArray(loaded), [focusedRouteKey]));\n  }\n  var renderNavigationView = function renderNavigationView(_ref3) {\n    var progress = _ref3.progress;\n    return React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent(_objectSpread(_objectSpread({}, drawerContentOptions), {}, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n  var renderContent = function renderContent() {\n    var isScreensEnabled = (screensEnabled === null || screensEnabled === void 0 ? void 0 : screensEnabled()) && detachInactiveScreens;\n    return React.createElement(ScreenContainer, {\n      enabled: isScreensEnabled,\n      style: styles.content\n    }, state.routes.map(function (route, index) {\n      var descriptor = descriptors[route.key];\n      var unmountOnBlur = descriptor.options.unmountOnBlur;\n      var isFocused = state.index === index;\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n      if (lazy && !loaded.includes(route.key) && !isFocused) {\n        return null;\n      }\n      var _descriptor$options = descriptor.options,\n        _descriptor$options$h = _descriptor$options.header,\n        header = _descriptor$options$h === void 0 ? function (props) {\n          return React.createElement(Header, props);\n        } : _descriptor$options$h,\n        _descriptor$options$h2 = _descriptor$options.headerShown,\n        headerShown = _descriptor$options$h2 === void 0 ? false : _descriptor$options$h2;\n      return React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused,\n        enabled: isScreensEnabled\n      }, headerShown ? React.createElement(NavigationContext.Provider, {\n        value: descriptor.navigation\n      }, React.createElement(NavigationRouteContext.Provider, {\n        value: route\n      }, header({\n        layout: dimensions,\n        scene: {\n          route: route,\n          descriptor: descriptor\n        }\n      }))) : null, descriptor.render());\n    }));\n  };\n  var activeKey = state.routes[state.index].key;\n  var _descriptors$activeKe = descriptors[activeKey].options,\n    gestureEnabled = _descriptors$activeKe.gestureEnabled,\n    swipeEnabled = _descriptors$activeKe.swipeEnabled;\n  return React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, React.createElement(SafeAreaProviderCompat, null, React.createElement(DrawerOpenContext.Provider, {\n    value: isDrawerOpen\n  }, React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    dimensions: dimensions\n  })))));\n}\nvar styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"names":["React","View","StyleSheet","I18nManager","Platform","BackHandler","ScreenContainer","screensEnabled","NavigationHelpersContext","NavigationContext","NavigationRouteContext","DrawerActions","useTheme","GestureHandlerRootView","SafeAreaProviderCompat","ResourceSavingScene","Header","DrawerContent","Drawer","DrawerOpenContext","DrawerPositionContext","useWindowDimensions","getIsDrawerOpenFromState","getDefaultDrawerWidth","_ref","height","width","smallerAxisSize","Math","min","isLandscape","isTablet","appBarHeight","OS","maxWidth","GestureHandlerWrapper","DrawerView","_ref2","state","navigation","descriptors","_ref2$lazy","lazy","_ref2$drawerContent","drawerContent","props","createElement","_ref2$drawerPosition","drawerPosition","isRTL","_ref2$keyboardDismiss","keyboardDismissMode","_ref2$overlayColor","overlayColor","_ref2$drawerType","drawerType","_ref2$hideStatusBar","hideStatusBar","_ref2$statusBarAnimat","statusBarAnimation","drawerContentOptions","drawerStyle","edgeWidth","gestureHandlerProps","minSwipeDistance","sceneContainerStyle","_ref2$detachInactiveS","detachInactiveScreens","_React$useState","useState","routes","index","key","_React$useState2","_slicedToArray","loaded","setLoaded","dimensions","_useTheme","colors","isDrawerOpen","handleDrawerOpen","useCallback","dispatch","_objectSpread","openDrawer","target","handleDrawerClose","closeDrawer","useEffect","handleClose","isFocused","handleEscape","e","subscription","addEventListener","_document","_document$body","_document$body$addEve","document","body","call","remove","_document2","_document2$body","_document2$body$remov","removeEventListener","focusedRouteKey","includes","concat","_toConsumableArray","renderNavigationView","_ref3","progress","Provider","value","renderContent","isScreensEnabled","enabled","style","styles","content","map","route","descriptor","unmountOnBlur","options","_descriptor$options","_descriptor$options$h","header","_descriptor$options$h2","headerShown","absoluteFill","opacity","isVisible","layout","scene","render","activeKey","_descriptors$activeKe","gestureEnabled","swipeEnabled","open","onOpen","onClose","backgroundColor","background","card","borderRightColor","border","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","overlayStyle","swipeEdgeWidth","swipeDistanceThreshold","renderDrawerContent","renderSceneContent","create","flex"],"sources":["/Users/duraanali/Pictures/Familyga App/frontend/node_modules/@react-navigation/drawer/lib/module/views/DrawerView.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  BackHandler,\n} from 'react-native';\nimport { ScreenContainer, screensEnabled } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  NavigationContext,\n  NavigationRouteContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n  ParamListBase,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport Header from './Header';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\nimport useWindowDimensions from '../utils/useWindowDimensions';\nimport getIsDrawerOpenFromState from '../utils/getIsDrawerOpenFromState';\nimport type {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n  DrawerHeaderProps,\n} from '../types';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/components/navigation-drawer\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n  detachInactiveScreens = true,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.routes[state.index].key]);\n  const dimensions = useWindowDimensions();\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = getIsDrawerOpenFromState(state);\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (!isDrawerOpen || drawerType === 'permanent') {\n      return;\n    }\n\n    const handleClose = () => {\n      // We shouldn't handle the back button if the parent screen isn't focused\n      // This will avoid the drawer overriding event listeners from a focused screen\n      if (!navigation.isFocused()) {\n        return false;\n      }\n\n      handleDrawerClose();\n\n      return true;\n    };\n\n    const handleEscape = (e: KeyboardEvent) => {\n      if (e.key === 'Escape') {\n        handleClose();\n      }\n    };\n\n    // We only add the listeners when drawer opens\n    // This way we can make sure that the listener is added as late as possible\n    // This will make sure that our handler will run first when back button is pressed\n    const subscription = BackHandler.addEventListener(\n      'hardwareBackPress',\n      handleClose\n    );\n\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', handleEscape);\n    }\n\n    return () => {\n      subscription.remove();\n\n      if (Platform.OS === 'web') {\n        document?.body?.removeEventListener?.('keyup', handleEscape);\n      }\n    };\n  }, [drawerType, handleDrawerClose, isDrawerOpen, navigation]);\n\n  const focusedRouteKey = state.routes[state.index].key;\n\n  if (!loaded.includes(focusedRouteKey)) {\n    setLoaded([...loaded, focusedRouteKey]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    const isScreensEnabled = screensEnabled?.() && detachInactiveScreens;\n\n    return (\n      // @ts-ignore\n      <ScreenContainer enabled={isScreensEnabled} style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(route.key) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          const {\n            header = (props: DrawerHeaderProps) => <Header {...props} />,\n            headerShown = false,\n          } = descriptor.options;\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n              enabled={isScreensEnabled}\n            >\n              {headerShown ? (\n                <NavigationContext.Provider value={descriptor.navigation}>\n                  <NavigationRouteContext.Provider value={route}>\n                    {header({\n                      layout: dimensions,\n                      scene: { route, descriptor },\n                    })}\n                  </NavigationRouteContext.Provider>\n                </NavigationContext.Provider>\n              ) : null}\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}