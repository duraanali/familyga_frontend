{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\", \"accessibilityState\", \"delayPressIn\"],\n  _excluded2 = [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\"];\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport * as React from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from \"./TouchableItem\";\nvar Touchable = function Touchable(_ref) {\n  var children = _ref.children,\n    style = _ref.style,\n    _onPress = _ref.onPress,\n    to = _ref.to,\n    accessibilityRole = _ref.accessibilityRole,\n    accessibilityState = _ref.accessibilityState,\n    delayPressIn = _ref.delayPressIn,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  if (Platform.OS === 'web' && to) {\n    return React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: function onPress(e) {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && (e.button == null || e.button === 0)) {\n          e.preventDefault();\n          _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n        }\n      }\n    }), children);\n  } else {\n    return React.createElement(TouchableItem, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      accessibilityState: accessibilityState,\n      delayPressIn: delayPressIn,\n      onPress: _onPress\n    }), React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\nexport default function DrawerItem(props) {\n  var _useTheme = useTheme(),\n    colors = _useTheme.colors;\n  var icon = props.icon,\n    label = props.label,\n    labelStyle = props.labelStyle,\n    to = props.to,\n    _props$focused = props.focused,\n    focused = _props$focused === void 0 ? false : _props$focused,\n    _props$activeTintColo = props.activeTintColor,\n    activeTintColor = _props$activeTintColo === void 0 ? colors.primary : _props$activeTintColo,\n    _props$inactiveTintCo = props.inactiveTintColor,\n    inactiveTintColor = _props$inactiveTintCo === void 0 ? Color(colors.text).alpha(0.68).rgb().string() : _props$inactiveTintCo,\n    _props$activeBackgrou = props.activeBackgroundColor,\n    activeBackgroundColor = _props$activeBackgrou === void 0 ? Color(activeTintColor).alpha(0.12).rgb().string() : _props$activeBackgrou,\n    _props$inactiveBackgr = props.inactiveBackgroundColor,\n    inactiveBackgroundColor = _props$inactiveBackgr === void 0 ? 'transparent' : _props$inactiveBackgr,\n    style = props.style,\n    onPress = props.onPress,\n    pressColor = props.pressColor,\n    pressOpacity = props.pressOpacity,\n    rest = _objectWithoutProperties(props, _excluded2);\n  var _StyleSheet$flatten = StyleSheet.flatten(style || {}),\n    _StyleSheet$flatten$b = _StyleSheet$flatten.borderRadius,\n    borderRadius = _StyleSheet$flatten$b === void 0 ? 4 : _StyleSheet$flatten$b;\n  var color = focused ? activeTintColor : inactiveTintColor;\n  var backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  var iconNode = icon ? icon({\n    size: 24,\n    focused: focused,\n    color: color\n  }) : null;\n  return React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius: borderRadius,\n      backgroundColor: backgroundColor\n    }, style]\n  }), React.createElement(Touchable, {\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius: borderRadius\n    }],\n    accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityState: {\n      selected: focused\n    },\n    accessibilityStates: focused ? ['selected'] : [],\n    pressColor: pressColor,\n    pressOpacity: pressOpacity,\n    to: to\n  }, React.createElement(React.Fragment, null, iconNode, React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? React.createElement(Text, {\n    numberOfLines: 1,\n    style: [{\n      color: color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color: color,\n    focused: focused\n  })))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32,\n    flex: 1\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"names":["React","Text","View","StyleSheet","Platform","Link","useTheme","Color","TouchableItem","Touchable","_ref","children","style","onPress","to","accessibilityRole","accessibilityState","delayPressIn","rest","_objectWithoutProperties","_excluded","OS","createElement","_extends","styles","button","e","metaKey","altKey","ctrlKey","shiftKey","preventDefault","DrawerItem","props","_useTheme","colors","icon","label","labelStyle","_props$focused","focused","_props$activeTintColo","activeTintColor","primary","_props$inactiveTintCo","inactiveTintColor","text","alpha","rgb","string","_props$activeBackgrou","activeBackgroundColor","_props$inactiveBackgr","inactiveBackgroundColor","pressColor","pressOpacity","_excluded2","_StyleSheet$flatten","flatten","_StyleSheet$flatten$b","borderRadius","color","backgroundColor","iconNode","size","collapsable","container","wrapper","accessibilityTraits","accessibilityComponentType","selected","accessibilityStates","Fragment","marginLeft","marginVertical","numberOfLines","fontWeight","create","marginHorizontal","overflow","flexDirection","alignItems","padding","marginRight","flex","display"],"sources":["/Users/duraanali/Pictures/Familyga App/frontend/node_modules/@react-navigation/drawer/lib/module/views/DrawerItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Platform,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Touchable = ({\n  children,\n  style,\n  onPress,\n  to,\n  accessibilityRole,\n  accessibilityState,\n  delayPressIn,\n  ...rest\n}: TouchableWithoutFeedbackProps & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <TouchableItem\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        accessibilityState={accessibilityState}\n        delayPressIn={delayPressIn}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </TouchableItem>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <Touchable\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityState={{ selected: focused }}\n        // @ts-expect-error: keep for compatibility with older React Native versions\n        accessibilityStates={focused ? ['selected'] : []}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </Touchable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n    flex: 1,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}