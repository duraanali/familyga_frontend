{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport default function useIsKeyboardShown() {\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isKeyboardShown = _React$useState2[0],\n    setIsKeyboardShown = _React$useState2[1];\n  React.useEffect(function () {\n    var handleKeyboardShow = function handleKeyboardShow() {\n      return setIsKeyboardShown(true);\n    };\n    var handleKeyboardHide = function handleKeyboardHide() {\n      return setIsKeyboardShown(false);\n    };\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n    return function () {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n  return isKeyboardShown;\n}","map":{"version":3,"names":["React","Keyboard","Platform","useIsKeyboardShown","_React$useState","useState","_React$useState2","_slicedToArray","isKeyboardShown","setIsKeyboardShown","useEffect","handleKeyboardShow","handleKeyboardHide","OS","addListener","removeListener"],"sources":["/Users/duraanali/Pictures/Familyga App/frontend/node_modules/@react-navigation/bottom-tabs/lib/module/utils/useIsKeyboardShown.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Keyboard, Platform } from 'react-native';\n\nexport default function useIsKeyboardShown() {\n  const [isKeyboardShown, setIsKeyboardShown] = React.useState(false);\n\n  React.useEffect(() => {\n    const handleKeyboardShow = () => setIsKeyboardShown(true);\n    const handleKeyboardHide = () => setIsKeyboardShown(false);\n\n    if (Platform.OS === 'ios') {\n      Keyboard.addListener('keyboardWillShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardWillHide', handleKeyboardHide);\n    } else {\n      Keyboard.addListener('keyboardDidShow', handleKeyboardShow);\n      Keyboard.addListener('keyboardDidHide', handleKeyboardHide);\n    }\n\n    return () => {\n      if (Platform.OS === 'ios') {\n        Keyboard.removeListener('keyboardWillShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardWillHide', handleKeyboardHide);\n      } else {\n        Keyboard.removeListener('keyboardDidShow', handleKeyboardShow);\n        Keyboard.removeListener('keyboardDidHide', handleKeyboardHide);\n      }\n    };\n  }, []);\n\n  return isKeyboardShown;\n}\n"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAAA,OAAAC,QAAA;AAAA,OAAAC,QAAA;AAGA,eAAe,SAASC,kBAATA,CAAA,EAA8B;EAC3C,IAAAC,eAAA,GAA8CJ,KAAK,CAACK,QAAN,CAAe,KAAf,CAA9C;IAAAC,gBAAA,GAAAC,cAAA,CAAAH,eAAA;IAAOI,eAAD,GAAAF,gBAAA;IAAkBG,kBAAlB,GAAAH,gBAAA;EAENN,KAAK,CAACU,SAAN,CAAgB,YAAM;IACpB,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA;MAAA,OAASF,kBAAkB,CAAC,IAAD,CAAnD;IAAA;IACA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA;MAAA,OAASH,kBAAkB,CAAC,KAAD,CAAnD;IAAA;IAEA,IAAIP,QAAQ,CAACW,EAAT,KAAgB,KAApB,EAA2B;MACzBZ,QAAQ,CAACa,WAAT,CAAqB,kBAArB,EAAyCH,kBAAzC;MACAV,QAAQ,CAACa,WAAT,CAAqB,kBAArB,EAAyCF,kBAAzC;IACD,CAHD,MAGO;MACLX,QAAQ,CAACa,WAAT,CAAqB,iBAArB,EAAwCH,kBAAxC;MACAV,QAAQ,CAACa,WAAT,CAAqB,iBAArB,EAAwCF,kBAAxC;IACD;IAED,OAAO,YAAM;MACX,IAAIV,QAAQ,CAACW,EAAT,KAAgB,KAApB,EAA2B;QACzBZ,QAAQ,CAACc,cAAT,CAAwB,kBAAxB,EAA4CJ,kBAA5C;QACAV,QAAQ,CAACc,cAAT,CAAwB,kBAAxB,EAA4CH,kBAA5C;MACD,CAHD,MAGO;QACLX,QAAQ,CAACc,cAAT,CAAwB,iBAAxB,EAA2CJ,kBAA3C;QACAV,QAAQ,CAACc,cAAT,CAAwB,iBAAxB,EAA2CH,kBAA3C;MACD;IACF,CARD;EASD,CArBD,EAqBG,EArBH;EAuBA,OAAOJ,eAAP;AACD"},"metadata":{},"sourceType":"module","externalDependencies":[]}